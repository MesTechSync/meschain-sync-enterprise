{{ header }}{{ column_left }}

<!-- Amazon Modern Dashboard Styles -->
<style>
/* Amazon Modern Dashboard CSS */
:root {
  --amazon-orange: #FF9900;
  --amazon-blue: #232F3E;
  --amazon-light-blue: #37475A;
  --amazon-gray: #131A22;
  --white: #FFFFFF;
  --light-gray: #F8F9FA;
  --medium-gray: #6C757D;
  --dark-gray: #343A40;
  --success: #28A745;
  --warning: #FFC107;
  --danger: #DC3545;
  --info: #17A2B8;
}

.amazon-dashboard-container {
  max-width: 1400px;
  margin: 0 auto;
  padding: 24px;
  background-color: var(--light-gray);
  min-height: 100vh;
  font-family: 'Amazon Ember', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

.amazon-dashboard-header {
  background: linear-gradient(135deg, var(--amazon-blue) 0%, var(--amazon-gray) 100%);
  color: var(--white);
  padding: 32px;
  border-radius: 16px;
  margin-bottom: 32px;
  box-shadow: 0 8px 32px rgba(35, 47, 62, 0.15);
}

.amazon-header-content {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.amazon-brand-section {
  display: flex;
  flex-direction: column;
  gap: 8px;
}

.amazon-logo {
  display: flex;
  align-items: center;
  gap: 16px;
}

.amazon-icon {
  width: 48px;
  height: 48px;
  background: var(--amazon-orange);
  border-radius: 12px;
  display: flex;
  align-items: center;
  justify-content: center;
  color: var(--white);
  font-size: 1.8rem;
}

.amazon-title {
  font-size: 2.5rem;
  font-weight: 700;
  margin: 0;
  letter-spacing: -0.04em;
}

.amazon-subtitle {
  font-size: 1.2rem;
  opacity: 0.9;
  margin: 0;
}

.amazon-header-controls {
  display: flex;
  align-items: center;
  gap: 20px;
}

.amazon-api-status {
  display: flex;
  align-items: center;
  gap: 8px;
  font-size: 0.9rem;
}

.amazon-status-indicator {
  width: 12px;
  height: 12px;
  border-radius: 50%;
  background: var(--success);
  animation: amazon-pulse 2s infinite;
}

@keyframes amazon-pulse {
  0% { box-shadow: 0 0 0 0 rgba(40, 167, 69, 0.7); }
  70% { box-shadow: 0 0 0 10px rgba(40, 167, 69, 0); }
  100% { box-shadow: 0 0 0 0 rgba(40, 167, 69, 0); }
}

.btn-amazon-outline {
  background: transparent;
  color: var(--white);
  border: 2px solid var(--white);
  padding: 10px 22px;
  border-radius: 8px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  text-decoration: none;
}

.btn-amazon-outline:hover {
  background: var(--white);
  color: var(--amazon-blue);
}

.amazon-metrics-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: 24px;
  margin-bottom: 32px;
}

.amazon-metric-card {
  background: var(--white);
  border-radius: 16px;
  padding: 24px;
  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08);
  border-left: 5px solid var(--amazon-orange);
  transition: all 0.3s ease;
  position: relative;
  overflow: hidden;
}

.amazon-metric-card:hover {
  transform: translateY(-4px);
  box-shadow: 0 8px 24px rgba(255, 153, 0, 0.15);
}

.amazon-metric-card::before {
  content: '';
  position: absolute;
  top: 0;
  right: 0;
  width: 60px;
  height: 60px;
  background: linear-gradient(45deg, rgba(255, 153, 0, 0.1), transparent);
  border-radius: 0 16px 0 60px;
}

.amazon-metric-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 16px;
}

.amazon-metric-icon {
  width: 48px;
  height: 48px;
  background: linear-gradient(135deg, var(--amazon-orange), #FFB84D);
  border-radius: 12px;
  display: flex;
  align-items: center;
  justify-content: center;
  color: var(--white);
  font-size: 1.5rem;
}

.amazon-metric-value {
  font-size: 2.5rem;
  font-weight: 700;
  color: var(--dark-gray);
  margin-bottom: 8px;
  letter-spacing: -0.04em;
}

.amazon-metric-label {
  font-size: 1rem;
  color: var(--medium-gray);
  margin-bottom: 12px;
}

.amazon-metric-change {
  display: flex;
  align-items: center;
  gap: 8px;
  font-size: 0.9rem;
  font-weight: 600;
  padding: 4px 12px;
  border-radius: 20px;
}

.amazon-metric-change.positive {
  background: rgba(40, 167, 69, 0.1);
  color: var(--success);
}

.amazon-metric-change.negative {
  background: rgba(220, 53, 69, 0.1);
  color: var(--danger);
}

.amazon-analytics-section {
  display: flex;
  gap: 32px;
  margin-bottom: 32px;
}

.amazon-charts-container {
  flex: 2;
}

.amazon-chart-card {
  background: var(--white);
  border-radius: 16px;
  padding: 24px;
  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08);
  margin-bottom: 24px;
}

.amazon-chart-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 24px;
  padding-bottom: 16px;
  border-bottom: 2px solid var(--light-gray);
}

.amazon-chart-header h3 {
  color: var(--dark-gray);
  font-weight: 700;
  margin: 0;
}

.amazon-period-selector {
  background: var(--white);
  border: 2px solid var(--amazon-orange);
  border-radius: 8px;
  padding: 8px 16px;
  color: var(--amazon-orange);
  font-weight: 600;
  cursor: pointer;
}

.amazon-secondary-charts {
  display: flex;
  gap: 24px;
}

.amazon-chart-card.amazon-small {
  flex: 1;
  padding: 20px;
}

.amazon-activity-section {
  flex: 1;
  background: var(--white);
  border-radius: 16px;
  padding: 24px;
  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08);
  max-height: 600px;
  overflow-y: auto;
}

.amazon-activity-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
  padding-bottom: 16px;
  border-bottom: 2px solid var(--light-gray);
}

.amazon-view-all {
  background: transparent;
  border: none;
  color: var(--amazon-orange);
  font-weight: 600;
  cursor: pointer;
  text-decoration: none;
}

.amazon-activity-item {
  display: flex;
  align-items: start;
  gap: 16px;
  padding: 16px 0;
  border-bottom: 1px solid var(--light-gray);
}

.amazon-activity-item:last-child {
  border-bottom: none;
}

.amazon-activity-icon {
  width: 40px;
  height: 40px;
  background: var(--amazon-orange);
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  color: var(--white);
  font-size: 0.9rem;
  flex-shrink: 0;
}

.amazon-activity-content {
  flex: 1;
}

.amazon-activity-text {
  color: var(--dark-gray);
  font-size: 0.9rem;
  margin-bottom: 4px;
}

.amazon-activity-time {
  color: var(--medium-gray);
  font-size: 0.8rem;
}

.amazon-loading {
  position: relative;
  overflow: hidden;
}

.amazon-loading::after {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 153, 0, 0.2), transparent);
  animation: amazon-shimmer 1.5s infinite;
}

@keyframes amazon-shimmer {
  0% { left: -100%; }
  100% { left: 100%; }
}

/* Mobile Responsive */
@media (max-width: 768px) {
  .amazon-dashboard-container {
    padding: 16px 12px;
  }

  .amazon-dashboard-header {
    padding: 16px;
    text-align: center;
  }

  .amazon-header-content {
    flex-direction: column;
    gap: 16px;
  }

  .amazon-metrics-grid {
    grid-template-columns: 1fr;
    gap: 12px;
  }

  .amazon-analytics-section {
    flex-direction: column;
  }

  .amazon-secondary-charts {
    flex-direction: column;
    gap: 16px;
  }

  .amazon-title {
    font-size: 1.8rem;
  }
}

@media (max-width: 480px) {
  .amazon-dashboard-container {
    padding: 12px 8px;
  }

  .amazon-title {
    font-size: 1.5rem;
  }

  .amazon-metric-card {
    padding: 16px;
    text-align: center;
  }

  .amazon-chart-card {
    padding: 16px;
  }
}
</style>

<div id="content">
  <div class="amazon-dashboard-container">
    
    <!-- Modern Amazon Header -->
    <div class="amazon-dashboard-header">
      <div class="amazon-header-content">
        <div class="amazon-brand-section">
          <div class="amazon-logo">
            <div class="amazon-icon">
              <i class="fab fa-amazon"></i>
            </div>
            <h1 class="amazon-title">Amazon</h1>
          </div>
          <p class="amazon-subtitle">SP-API Advanced Dashboard</p>
        </div>
        
        <div class="amazon-header-controls">
          <div class="amazon-api-status">
            <span class="amazon-status-indicator"></span>
            <span class="amazon-status-text">SP-API Connected</span>
          </div>
          <div class="amazon-refresh-button">
            <a href="javascript:void(0)" onclick="refreshAmazonData()" class="btn-amazon-outline">
              <i class="fas fa-sync-alt"></i> Refresh
            </a>
          </div>
        </div>
      </div>
    </div>

    <!-- Error/Success Messages -->
    {% if error_warning %}
    <div class="alert alert-danger alert-dismissible">
      <i class="fa fa-exclamation-circle"></i> {{ error_warning }}
      <button type="button" class="close" data-dismiss="alert">&times;</button>
    </div>
    {% endif %}
    
    {% if success %}
    <div class="alert alert-success alert-dismissible">
      <i class="fa fa-check-circle"></i> {{ success }}
      <button type="button" class="close" data-dismiss="alert">&times;</button>
    </div>
    {% endif %}

    <!-- Metrics Cards Grid -->
    <div class="amazon-metrics-section">
      <div class="amazon-metrics-grid" id="amazonMetricsGrid">
        <!-- Default metric cards (will be updated via AJAX) -->
        <div class="amazon-metric-card">
          <div class="amazon-metric-header">
            <div class="amazon-metric-icon">
              <i class="fas fa-box"></i>
            </div>
          </div>
          <div class="amazon-metric-value">{{ product_count|default(0) }}</div>
          <div class="amazon-metric-label">Total Products</div>
          <div class="amazon-metric-change positive">
            <i class="fas fa-arrow-up"></i>
            0.0%
          </div>
        </div>

        <div class="amazon-metric-card">
          <div class="amazon-metric-header">
            <div class="amazon-metric-icon">
              <i class="fas fa-shopping-cart"></i>
            </div>
          </div>
          <div class="amazon-metric-value">{{ order_count|default(0) }}</div>
          <div class="amazon-metric-label">Total Orders</div>
          <div class="amazon-metric-change positive">
            <i class="fas fa-arrow-up"></i>
            0.0%
          </div>
        </div>

        <div class="amazon-metric-card">
          <div class="amazon-metric-header">
            <div class="amazon-metric-icon">
              <i class="fas fa-dollar-sign"></i>
            </div>
          </div>
          <div class="amazon-metric-value">$0</div>
          <div class="amazon-metric-label">Total Revenue</div>
          <div class="amazon-metric-change positive">
            <i class="fas fa-arrow-up"></i>
            0.0%
          </div>
        </div>

        <div class="amazon-metric-card">
          <div class="amazon-metric-header">
            <div class="amazon-metric-icon">
              <i class="fas fa-star"></i>
            </div>
          </div>
          <div class="amazon-metric-value">0.0</div>
          <div class="amazon-metric-label">Average Rating</div>
          <div class="amazon-metric-change positive">
            <i class="fas fa-arrow-up"></i>
            0.0
          </div>
        </div>
      </div>
    </div>

    <!-- Charts and Analytics Section -->
    <div class="amazon-analytics-section">
      <div class="amazon-charts-container">
        <div class="amazon-chart-card">
          <div class="amazon-chart-header">
            <h3>Sales Performance</h3>
            <div class="amazon-chart-controls">
              <select class="amazon-period-selector" id="amazonSalesPeriod">
                <option value="daily">Daily</option>
                <option value="weekly" selected>Weekly</option>
                <option value="monthly">Monthly</option>
              </select>
            </div>
          </div>
          <div class="amazon-chart-content">
            <canvas id="amazonSalesChart" width="800" height="300"></canvas>
          </div>
        </div>

        <div class="amazon-secondary-charts">
          <div class="amazon-chart-card amazon-small">
            <h4>Category Distribution</h4>
            <canvas id="amazonCategoryChart" width="300" height="200"></canvas>
          </div>
          <div class="amazon-chart-card amazon-small">
            <h4>Order Status</h4>
            <canvas id="amazonOrderStatusChart" width="300" height="200"></canvas>
          </div>
        </div>
      </div>

      <!-- Activity Feed -->
      <div class="amazon-activity-section">
        <div class="amazon-activity-header">
          <h3>Recent Activities</h3>
          <a href="#" class="amazon-view-all">View All</a>
        </div>
        <div class="amazon-activity-feed" id="amazonActivityFeed">
          <!-- Sample activity items -->
          <div class="amazon-activity-item">
            <div class="amazon-activity-icon">
              <i class="fas fa-shopping-cart"></i>
            </div>
            <div class="amazon-activity-content">
              <div class="amazon-activity-text">New order received #AMZ001</div>
              <div class="amazon-activity-time">5 minutes ago</div>
            </div>
          </div>
          
          <div class="amazon-activity-item">
            <div class="amazon-activity-icon">
              <i class="fas fa-sync-alt"></i>
            </div>
            <div class="amazon-activity-content">
              <div class="amazon-activity-text">Product prices updated</div>
              <div class="amazon-activity-time">15 minutes ago</div>
            </div>
          </div>
          
          <div class="amazon-activity-item">
            <div class="amazon-activity-icon">
              <i class="fas fa-box"></i>
            </div>
            <div class="amazon-activity-content">
              <div class="amazon-activity-text">Inventory levels synchronized</div>
              <div class="amazon-activity-time">30 minutes ago</div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Legacy Quick Actions for existing functionality -->
    <div class="row" style="margin-top: 20px;">
      <div class="col-md-12">
        <div class="panel panel-default">
          <div class="panel-heading">
            <h3 class="panel-title"><i class="fa fa-cogs"></i> Quick Actions</h3>
          </div>
          <div class="panel-body">
            <div class="row">
              <div class="col-md-3">
                <button type="button" id="sync-orders" class="btn btn-primary btn-lg btn-block">
                  <i class="fa fa-download"></i> Sync Orders
                </button>
              </div>
              <div class="col-md-3">
                <button type="button" id="sync-products" class="btn btn-success btn-lg btn-block">
                  <i class="fa fa-upload"></i> Sync Products
                </button>
              </div>
              <div class="col-md-3">
                <button type="button" id="update-stock" class="btn btn-info btn-lg btn-block">
                  <i class="fa fa-cubes"></i> Update Stock
                </button>
              </div>
              <div class="col-md-3">
                <button type="button" id="test-connection" class="btn btn-warning btn-lg btn-block">
                  <i class="fa fa-plug"></i> Test Connection
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

  </div>
</div>

<!-- Include Chart.js -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script type="text/javascript">
// Amazon Dashboard JavaScript with Chart.js Integration
const AmazonCharts = {
  salesChart: null,
  categoryChart: null,
  orderStatusChart: null,

  init() {
    this.initSalesChart();
    this.initCategoryChart();
    this.initOrderStatusChart();
    this.startRealTimeUpdates();
  },

  initSalesChart() {
    const ctx = document.getElementById('amazonSalesChart');
    if (!ctx) return;
    
    this.salesChart = new Chart(ctx.getContext('2d'), {
      type: 'line',
      data: {
        labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],
        datasets: [{
          label: 'Sales Revenue ($)',
          data: [1200, 1900, 3000, 5000, 2300, 3200, 4100],
          backgroundColor: 'rgba(255, 153, 0, 0.1)',
          borderColor: '#FF9900',
          borderWidth: 4,
          fill: true,
          tension: 0.4,
          pointBackgroundColor: '#FF9900',
          pointBorderColor: '#FFFFFF',
          pointBorderWidth: 3,
          pointRadius: 8,
          pointHoverRadius: 12,
          pointHoverBackgroundColor: '#E8890A',
          pointHoverBorderColor: '#FFFFFF'
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            display: false
          },
          tooltip: {
            backgroundColor: '#232F3E',
            titleColor: '#FFFFFF',
            bodyColor: '#FFFFFF',
            cornerRadius: 12,
            displayColors: false,
            titleFont: {
              size: 16,
              weight: 'bold'
            },
            bodyFont: {
              size: 14
            },
            padding: 16,
            callbacks: {
              label: function(context) {
                return `Sales: $${context.parsed.y.toLocaleString()}`;
              }
            }
          }
        },
        scales: {
          y: {
            beginAtZero: true,
            grid: {
              color: 'rgba(0, 0, 0, 0.05)',
              drawBorder: false
            },
            ticks: {
              color: '#6C757D',
              font: {
                size: 12,
                weight: '500'
              },
              callback: function(value) {
                return '$' + value.toLocaleString();
              }
            }
          },
          x: {
            grid: {
              color: 'rgba(0, 0, 0, 0.05)',
              drawBorder: false
            },
            ticks: {
              color: '#6C757D',
              font: {
                size: 12,
                weight: '500'
              }
            }
          }
        },
        animation: {
          duration: 2000,
          easing: 'easeInOutQuart'
        }
      }
    });
  },

  initCategoryChart() {
    const ctx = document.getElementById('amazonCategoryChart');
    if (!ctx) return;
    
    this.categoryChart = new Chart(ctx.getContext('2d'), {
      type: 'doughnut',
      data: {
        labels: ['Electronics', 'Clothing', 'Home & Garden', 'Books', 'Sports', 'Beauty'],
        datasets: [{
          data: [35, 25, 15, 12, 8, 5],
          backgroundColor: [
            '#FF9900',
            '#232F3E',
            '#FFB84D',
            '#131A22',
            '#FFCC66',
            '#37475A'
          ],
          borderWidth: 0,
          hoverBorderWidth: 4,
          hoverBorderColor: '#FFFFFF'
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            position: 'bottom',
            labels: {
              usePointStyle: true,
              pointStyle: 'circle',
              padding: 20,
              font: {
                size: 11,
                weight: '500'
              },
              color: '#6C757D'
            }
          },
          tooltip: {
            backgroundColor: '#232F3E',
            titleColor: '#FFFFFF',
            bodyColor: '#FFFFFF',
            cornerRadius: 8,
            displayColors: true,
            callbacks: {
              label: function(context) {
                const percentage = ((context.parsed / context.dataset.data.reduce((a, b) => a + b, 0)) * 100).toFixed(1);
                return `${context.label}: ${percentage}%`;
              }
            }
          }
        },
        animation: {
          duration: 1500,
          easing: 'easeOutQuart'
        }
      }
    });
  },

  initOrderStatusChart() {
    const ctx = document.getElementById('amazonOrderStatusChart');
    if (!ctx) return;
    
    this.orderStatusChart = new Chart(ctx.getContext('2d'), {
      type: 'bar',
      data: {
        labels: ['Pending', 'Processing', 'Shipped', 'Delivered'],
        datasets: [{
          label: 'Order Count',
          data: [15, 28, 42, 156],
          backgroundColor: [
            '#FFC107',
            '#FF9900',
            '#17A2B8',
            '#28A745'
          ],
          borderRadius: 8,
          borderSkipped: false
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            display: false
          },
          tooltip: {
            backgroundColor: '#232F3E',
            titleColor: '#FFFFFF',
            bodyColor: '#FFFFFF',
            cornerRadius: 8,
            displayColors: false
          }
        },
        scales: {
          y: {
            beginAtZero: true,
            grid: {
              color: 'rgba(0, 0, 0, 0.05)'
            },
            ticks: {
              color: '#6C757D',
              font: {
                size: 10
              }
            }
          },
          x: {
            grid: {
              display: false
            },
            ticks: {
              color: '#6C757D',
              font: {
                size: 10
              }
            }
          }
        },
        animation: {
          duration: 1500,
          easing: 'easeOutBounce'
        }
      }
    });
  },
  startRealTimeUpdates() {
    // Initial data load
    this.fetchChartData();
    
    // Update every 30 seconds for Amazon
    setInterval(() => {
      this.fetchChartData();
    }, 30000);
    
    // WebSocket connection for real-time updates
    this.initWebSocketConnection();
  },

  updateChart(chartType, newData) {
    if (!newData) return;
    
    const chart = this[chartType + 'Chart'];
    if (chart && newData.labels && newData.data) {
      chart.data.labels = newData.labels;
      chart.data.datasets[0].data = newData.data;
      
      // Smooth animation update
      chart.update('active');
      
      console.log(`${chartType} chart updated with new data`);
    }
  },

  updateSummaryCards(summaryData) {
    if (!summaryData) return;
    
    // Update with animation effects
    Object.keys(summaryData).forEach(key => {
      const element = document.querySelector(`[data-summary="${key}"]`);
      if (element) {
        // Add pulse animation
        element.style.animation = 'amazon-pulse 0.5s ease-in-out';
        element.textContent = summaryData[key];
        
        setTimeout(() => {
          element.style.animation = '';
        }, 500);
      }
    });
  },

  initWebSocketConnection() {
    try {
      const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
      const wsUrl = `${protocol}//${window.location.host}/admin/extension/module/meschain/websocket`;
      
      this.websocket = new WebSocket(wsUrl);
      
      this.websocket.onopen = () => {
        console.log('Amazon WebSocket connection established');
        // Subscribe to Amazon-specific updates
        this.websocket.send(JSON.stringify({
          type: 'subscribe',
          platform: 'amazon',
          events: ['sales_update', 'order_update', 'inventory_update']
        }));
      };
      
      this.websocket.onmessage = (event) => {
        try {
          const data = JSON.parse(event.data);
          this.handleWebSocketUpdate(data);
        } catch (error) {
          console.error('WebSocket message parsing error:', error);
        }
      };
      
      this.websocket.onclose = () => {
        console.log('Amazon WebSocket connection closed, attempting reconnect...');
        // Reconnect after 5 seconds
        setTimeout(() => {
          this.initWebSocketConnection();
        }, 5000);
      };
      
      this.websocket.onerror = (error) => {
        console.error('Amazon WebSocket error:', error);
      };
    } catch (error) {
      console.warn('WebSocket not available, using polling fallback');
    }
  },

  handleWebSocketUpdate(data) {
    if (data.platform === 'amazon') {
      switch (data.type) {
        case 'sales_update':
          this.updateChart('sales', data.chartData);
          break;
        case 'order_update':
          this.updateChart('orderStatus', data.chartData);
          break;
        case 'inventory_update':
          this.updateChart('category', data.chartData);
          break;
        case 'metrics_update':
          this.updateMetricCards(data.metrics);
          break;
      }
    }
  },
  async fetchChartData() {
    try {
      const period = document.getElementById('amazonSalesPeriod')?.value || 'weekly';
      console.log('Fetching Amazon chart data for period:', period);
      
      // Connect to production-ready backend APIs
      const response = await fetch(`/admin/extension/module/meschain/dashboard/performance-metrics?platform=amazon&period=${period}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'X-Requested-With': 'XMLHttpRequest',
          'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.getAttribute('content') || ''
        }
      });
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const data = await response.json();
      
      if (data.status === 'success' && data.data.chartjs_data) {
        // Update Chart.js with real-time data
        this.updateChart('sales', data.data.chartjs_data.sales);
        this.updateChart('category', data.data.chartjs_data.categories);
        this.updateChart('orderStatus', data.data.chartjs_data.orders);
        
        // Update summary cards
        this.updateSummaryCards(data.data.summary_cards);
        
        console.log('Amazon chart data updated successfully');
      }
    } catch (error) {
      console.error('Error fetching Amazon chart data:', error);
      this.showErrorState(error.message);
    }
  }
};

// Amazon API Communication - Ready for VSCode backend integration
const AmazonAPI = {
  baseUrl: '/admin/index.php?route=extension/module/amazon/ajax',
  isLoading: false,
  async fetchDashboardMetrics() {
    if (this.isLoading) return;
    
    this.isLoading = true;
    this.showLoadingState();

    try {
      // Connect to production-ready dashboard metrics API
      const response = await fetch('/admin/extension/module/meschain/dashboard/metrics?platform=amazon', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'X-Requested-With': 'XMLHttpRequest',
          'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.getAttribute('content') || ''
        }
      });
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const data = await response.json();
      
      if (data.status === 'success') {
        // Update metric cards with real-time data
        this.updateMetricCards(data.data.metrics);
        
        // Update sync status
        this.updateSyncStatus(data.data.api_status?.amazon || 'connected');
        
        // Update performance indicators
        this.updatePerformanceMetrics(data.data.performance);
        
        console.log('Amazon dashboard metrics updated successfully');
      } else {
        throw new Error(data.message || 'Failed to fetch metrics');
      }
    } catch (error) {
      console.error('Error fetching Amazon metrics:', error);
      this.showErrorState(error.message);
    } finally {
      this.isLoading = false;
      this.hideLoadingState();
    }
  },

  updateMetricCards(metrics) {
    if (!metrics) return;
    
    // Update total products
    const productsCard = document.querySelector('[data-metric="products"] .amazon-metric-value');
    if (productsCard && metrics.total_products) {
      productsCard.textContent = metrics.total_products.toLocaleString();
    }
    
    // Update total sales
    const salesCard = document.querySelector('[data-metric="sales"] .amazon-metric-value');
    if (salesCard && metrics.total_sales) {
      salesCard.textContent = `$${metrics.total_sales.toLocaleString()}`;
    }
    
    // Update orders
    const ordersCard = document.querySelector('[data-metric="orders"] .amazon-metric-value');
    if (ordersCard && metrics.total_orders) {
      ordersCard.textContent = metrics.total_orders.toLocaleString();
    }
    
    // Update sync status
    const syncCard = document.querySelector('[data-metric="sync"] .amazon-metric-value');
    if (syncCard && metrics.sync_status) {
      syncCard.textContent = metrics.sync_status;
    }
  },

  updatePerformanceMetrics(performance) {
    if (!performance) return;
    
    // Update performance indicators with smooth animations
    const performanceElements = document.querySelectorAll('.amazon-performance-indicator');
    performanceElements.forEach(element => {
      const metric = element.dataset.metric;
      if (performance[metric]) {
        element.style.width = `${Math.min(performance[metric], 100)}%`;
        element.setAttribute('title', `${performance[metric]}% performance`);
      }
    });
  },

  showErrorState(message) {
    const errorContainer = document.querySelector('.amazon-error-container');
    if (errorContainer) {
      errorContainer.innerHTML = `
        <div class="alert alert-warning">
          <i class="fa fa-exclamation-triangle"></i> 
          Connection issue: ${message}. Retrying...
        </div>
      `;
      errorContainer.style.display = 'block';
      
      // Auto-hide after 5 seconds
      setTimeout(() => {
        errorContainer.style.display = 'none';
      }, 5000);
    }
  },

  showLoadingState() {
    const cards = document.querySelectorAll('.amazon-metric-card');
    cards.forEach(card => card.classList.add('amazon-loading'));
  },

  hideLoadingState() {
    const cards = document.querySelectorAll('.amazon-metric-card');
    cards.forEach(card => card.classList.remove('amazon-loading'));
  },

  updateSyncStatus(status) {
    const indicator = document.querySelector('.amazon-status-indicator');
    const text = document.querySelector('.amazon-status-text');
    
    if (indicator && text) {
      if (status === 'connected') {
        indicator.style.background = 'var(--success)';
        text.textContent = 'SP-API Connected';
      } else {
        indicator.style.background = 'var(--danger)';
        text.textContent = 'SP-API Disconnected';
      }
    }
  }
};

// Global refresh function
function refreshAmazonData() {
  AmazonAPI.fetchDashboardMetrics();
  AmazonCharts.fetchChartData();
  
  // Show loading feedback with enhanced UX
  const indicator = document.querySelector('.amazon-status-indicator');
  if (indicator) {
    indicator.style.animation = 'amazon-pulse 0.5s infinite';
    setTimeout(() => {
      indicator.style.animation = 'amazon-pulse 2s infinite';
    }, 2000);
  }
  
  // Update refresh timestamp
  const timestamp = document.querySelector('.amazon-last-update');
  if (timestamp) {
    timestamp.textContent = `Last updated: ${new Date().toLocaleTimeString()}`;
  }
}

// Enhanced global API status check
async function checkAmazonAPIStatus() {
  try {
    const response = await fetch('/admin/extension/module/meschain/api/amazon/status', {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'X-Requested-With': 'XMLHttpRequest'
      }
    });
    
    const data = await response.json();
    
    if (data.status === 'success') {
      AmazonAPI.updateSyncStatus(data.data.connection_status);
      return data.data.connection_status === 'connected';
    }
    return false;
  } catch (error) {
    console.error('Amazon API status check failed:', error);
    AmazonAPI.updateSyncStatus('disconnected');
    return false;
  }
}

// Initialize when DOM ready
document.addEventListener('DOMContentLoaded', function() {
  console.log('Initializing Amazon Dashboard with production backend integration...');
  
  // Initialize Chart.js components
  AmazonCharts.init();
  
  // Initial data fetch
  setTimeout(() => {
    AmazonAPI.fetchDashboardMetrics();
    checkAmazonAPIStatus();
  }, 500);
  
  // Add event listeners for interactive elements
  const refreshBtn = document.getElementById('refresh-amazon-data');
  if (refreshBtn) {
    refreshBtn.addEventListener('click', refreshAmazonData);
  }
  
  const syncBtn = document.getElementById('sync-products');
  if (syncBtn) {
    syncBtn.addEventListener('click', async () => {
      syncBtn.disabled = true;
      syncBtn.innerHTML = '<i class="fa fa-spin fa-spinner"></i> Syncing...';
      
      try {
        await fetch('/admin/extension/module/meschain/amazon/sync', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest'
          }
        });
        
        setTimeout(refreshAmazonData, 1000);
      } catch (error) {
        console.error('Sync failed:', error);
      } finally {
        syncBtn.disabled = false;
        syncBtn.innerHTML = '<i class="fa fa-upload"></i> Sync Products';
      }
    });
  }
  
  // Add performance monitoring
  setInterval(checkAmazonAPIStatus, 60000); // Check every minute
  
  console.log('Amazon Dashboard initialization complete - Backend APIs connected!');
});
  AmazonAPI.fetchDashboardMetrics();
  
  // Period selector change handler
  const periodSelector = document.getElementById('amazonSalesPeriod');
  if (periodSelector) {
    periodSelector.addEventListener('change', function() {
      AmazonCharts.fetchChartData();
    });
  }
});

// Legacy button handlers maintained for compatibility
$(document).ready(function() {
    function showAlert(type, message) {
        var alertClass = 'alert-' + type;
        var icon = type === 'success' ? 'check' : 'times';
        
        var alert = '<div class="alert ' + alertClass + ' alert-dismissible">' +
                   '<i class="fa fa-' + icon + '"></i> ' + message +
                   '<button type="button" class="close" data-dismiss="alert">&times;</button>' +
                   '</div>';
        
        $('.amazon-dashboard-container').prepend(alert);
        
        setTimeout(function() {
            $('.alert').fadeOut();
        }, 5000);
    }

    // Placeholder for backend integration
    $('#test-connection, #sync-orders, #sync-products, #update-stock').click(function() {
        var action = $(this).attr('id');
        showAlert('info', 'Backend integration ready for ' + action + ' action.');
        console.log('VSCode backend integration point:', action);
    });
});
</script>

{{ footer }} 